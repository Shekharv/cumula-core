<?php
/**
 * Cumula
 *
 * Cumula â€” framework for the cloud.
 *
 * @package    Cumula
 * @version    0.1.0
 * @author     Seabourne Consulting
 * @license    MIT License
 * @copyright  2011 Seabourne Consulting
 * @link       http://cumula.org
 */


/**
 * Devel Component
 *
 * Provides basic debugging info, including an event trace.
 *
 * @package		Cumula
 * @subpackage	Devel
 * @author     Seabourne Consulting
 */
class Devel extends BaseComponent {
	protected $_benchmarks;
	protected $_logEventStack;
	
	/**
	 * Constructor.
	 * 
	 * @return unknown_type
	 */
	public function __construct() {
		parent::__construct();
		
		//Initialize the benchmarks container to an empty array.
		$this->_benchmarks = array();
		
		//Add  listener to app BOOT_INIT event
		$this->addEventListenerTo('Application', BOOT_INIT, 'startAppTimer');
		$this->_logEventStack = '';
	}
	
	
	/**
	 * Starts the application response timer, used as an event callback
	 * 
	 * @param $event
	 * @param $request
	 * @param $response
	 * @return unknown_type
	 */
	public function startAppTimer($event, $dispatcher, $request, $response) {
		$this->addEventListenerTo('Application', EVENTDISPATCHER_EVENT_DISPATCHED, 'logEventDispatch');
		$this->addEventListenerTo('Response', EVENTDISPATCHER_EVENT_DISPATCHED, 'logEventDispatch');
		
		$this->addBenchmark('app_boot');
		$this->addEventListenerTo('Response', RESPONSE_PREPARE, 'stopAppTimer');
	}
	
	/**
	 * Event listener to stop the app timer
	 * 
	 * @param $event
	 * @param $response
	 * @return unknown_type
	 */
	public function stopAppTimer($event, $response) {
		$this->addBenchmark('app_shutdown');
		$time = $this->compareBenchmarks('app_boot', 'app_shutdown');
		if($this->config->getConfigValue('show_render', true)) {
			$response->response['content'] .= '<div>Rendering the page took '.(number_format($time, 4)*1000).' ms</div>';
			$response->response['content'] .= '<div>Rendering the page used '.(memory_get_usage()/1000).' KB of memory</div>'; 
			$response->response['content'] .= '<div>Rendering the page used a maximum '.(memory_get_peak_usage()/1000).' KB of memory</div>';
			$comps = ComponentManager::getInstance()->getEnabledComponentList();
			$response->response['content'] .= '<div>Rendering the page used '.count($comps).' components</div>';
			$response->response['content'] .= '<div>Call Stack</div><pre>'.$this->_logEventStack.'</pre>';
		}
	}
	
	/* (non-PHPdoc)
	 * @see core/abstracts/BaseComponent#install()
	 */
	public function install() {
		$cm = ComponentManager::getInstance();
		$cm->registerStartupComponent($this);
	}
	
	/* (non-PHPdoc)
	 * @see core/abstracts/BaseComponent#startup()
	 */
	public function startup() {
		$components = ComponentManager::getInstance()->getEnabledComponentList();
		foreach($components as $component) {
			if($component != get_class($this))
				$this->addEventListenerTo($component, EVENTDISPATCHER_EVENT_DISPATCHED, 'logEventDispatch');
		}
		$this->addEventListenerTo('ComponentManager', EVENTDISPATCHER_EVENT_DISPATCHED, 'logEventDispatch');
		$this->addEventListenerTo('SystemConfig', EVENTDISPATCHER_EVENT_DISPATCHED, 'logEventDispatch');
	}
	
	/**
	 * Event listener
	 * 
	 * @param $event
	 * @param $event_dispatched
	 * @param $instance
	 * @param $handler
	 * @return unknown_type
	 */
	public function logEventDispatch($event, $caller, $event_dispatched, $instance, $handler) {
		global $level;
		if(is_array($handler))
			$string = "$event_dispatched dispatched by ".get_class($instance)." to ".get_class($handler[0]).'::'.$handler[1];
		else
			$string = "$event_dispatched dispatched by ".get_class($instance)." to ".get_class($handler);
		$this->_logInfo("Level $level: ".$string);	
		$spacing = '';
		for($i = 1; $i < $level; $i++) {
			$spacing .= "&nbsp;&nbsp;&nbsp;";
		}
		$this->_logEventStack .= $spacing.$string."\n";
	}
	
	/**
	 * Adds a new benchmark time
	 * 
	 * @param $benchmarkName
	 * @return unknown_type
	 */
	public function addBenchmark($benchmarkName) {
		$this->_benchmarks[$benchmarkName] = microtime(true);
	}
	
	/**
	 * Compares two benchmark times
	 * 
	 * @param $benchmarkName1
	 * @param $benchmarkName2
	 * @return unknown_type
	 */
	public function compareBenchmarks($benchmarkName1, $benchmarkName2) {
		if(array_key_exists($benchmarkName2, $this->_benchmarks) && array_key_exists($benchmarkName1, $this->_benchmarks))
			return ($this->_benchmarks[$benchmarkName2]-$this->_benchmarks[$benchmarkName1]);
		else
			return false;
	}
}

function jslog($obj) {
	$ref = new ReflectionClass(get_class($obj));
	$props = $obj->getInstanceVars();
	$json = "{'\$this(".$ref->getName().")':".json_encode($props, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP)."}";
	return "<script type='text/javascript'>console.log(".$json.");</script>";
}